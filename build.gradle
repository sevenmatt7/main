plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'org.asciidoctor.convert' version '1.5.6'
    id 'jacoco'
}

checkstyle {
    toolVersion = '8.23'
}

shadowJar {
    archiveBaseName = "AlgoSenpai"
    archiveVersion = "0.1.0"
    archiveClassifier = null
    archiveAppendix = null
}

javafx {
    version = "11.0.2"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.media' ]
}

group 'com.algosenpai.app'
version '0.1.0'

repositories {
    mavenCentral()
}

application {
    mainClassName = "com.algosenpai.app.Launcher"
}

run {
    standardInput = System.in
}

dependencies {
    implementation 'com.itextpdf:itextpdf:5.5.10'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.56'
    testImplementation 'org.testfx:testfx-core:4.0.16-alpha'
    testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.5.0'
    testImplementation 'org.testfx:openjfx-monocle:jdk-11+26'
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
    testLogging.showStandardStreams = true
    testLogging {
        events "passed", "skipped", "failed"
    }

    systemProperty 'java.awt.headless', 'true'
    systemProperty 'testfx.robot', 'glass'
    systemProperty 'testfx.headless', 'true'
    systemProperty 'prism.order', 'sw'
    systemProperty 'prism.text', 't2k'
    systemProperty 'testfx.setup.timeout', '2500'

}

plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'com.github.kt3k.coveralls' version '2.4.0'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'org.asciidoctor.convert' version '1.5.6'
    id 'application'
}

// Specifies the entry point of the application
mainClassName = 'seedu.address.Main'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

checkstyle {
    toolVersion = '8.1'
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

test {
    useJUnitPlatform()
}

dependencies {
    String jUnitVersion = '5.4.0'
    String javaFxVersion = '11'

    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.0'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.7.4'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jUnitVersion

    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jUnitVersion
}

shadowJar {
    archiveName = 'addressbook.jar'

    destinationDir = file("${buildDir}/jar/")
}

task coverage(type: JacocoReport) {
    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)
    classDirectories.from files(sourceSets.main.output)
    executionData.from files(jacocoTestReport.executionData)
    afterEvaluate {
        classDirectories.from files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*.jar'])
        })
    }
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

asciidoctor {
    backends 'html5'
    sourceDir 'docs'
    outputDir "${buildDir}/docs"

    options = [
            template_dirs: [file("${sourceDir}/templates")],
    ]

    attributes = [
            linkcss: true,
            stylesheet: 'gh-pages.css',
            'source-highlighter': 'coderay',
            icons: 'font',
            experimental: true,
            sectlinks: true,
            idprefix: '',  // for compatibility with GitHub preview
            idseparator: '-',
            'site-root': "${sourceDir}",  // must be the same as sourceDir, do not modify
            'site-name': 'AlgoSenpai Adventures',
            'site-githuburl': 'https://github.com/AY1920S1-CS2113T-T09-3/main',
    ]

    options['template_dirs'].each {
        inputs.files fileTree(it)
    }
}

// Copies stylesheets into the directory containing generated HTML files as
// Asciidoctor does not copy linked CSS files to the output directory when rendering.
// This is needed for linked stylesheets and embedded stylesheets which import other files.
task copyStylesheets(type: Copy) {
    from "${asciidoctor.sourceDir}/stylesheets"
    into "${asciidoctor.outputDir}/html5/stylesheets"
}
asciidoctor.dependsOn copyStylesheets

defaultTasks 'clean', 'test', 'coverage', 'asciidoctor'